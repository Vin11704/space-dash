module alu#(
  SIZE = 16 : SIZE > 0
  ) (
    input a[SIZE],
    input b[SIZE],
    input alufn_signal[6],
    output out[SIZE],
    output z,
    output v,
    output n
  ) {
  adder adder(#SIZE(SIZE));
  boolean boolean(#SIZE(SIZE));
  shifter shifter(#SIZE(SIZE));
  compare compare(#SIZE(SIZE));
  division division(#SIZE(SIZE));
  multiplier multiplier(#SIZE(16)); // !!! take note here
  
  always {
    // default values to silence errors 
    z = 0;
    v = 0;
    n = 0;
    out = 0;
    adder.a = 0;
    adder.b = 0;
    adder.alufn_signal = 0;
    boolean.a = 0;
    boolean.b = 0;
    boolean.alufn_signal = 0;
    shifter.a = 0;
    shifter.b = 0;
    shifter.alufn_signal = 0;
    compare.z = 0;
    compare.v = 0;
    compare.n = 0;
    compare.alufn_signal = 0;
    multiplier.a = 0;
    multiplier.b = 0;

    // YOUR ANSWER HERE 
    adder.a = a;
    adder.b = b;
    adder.alufn_signal = alufn_signal;
    z = adder.z;
    v = adder.v;
    n = adder.n;
    //out = adder.sum;
    compare.z = adder.z;
    compare.v = adder.v; 
    compare.n = adder.n;
    compare.alufn_signal = alufn_signal;
    //out = c{(SIZE-1)x{b0}, compare.cmp};
    division.a = a;
    division.b = b;
    boolean.a = a;
    boolean.b = b;
    boolean.alufn_signal = alufn_signal;
    //out = boolean.bool;
    shifter.a = a;
    shifter.b = b[3:0];
    shifter.alufn_signal = alufn_signal;
    //out = shifter.shift;
    multiplier.a = a;
    multiplier.b = b;
    //out = multiplier.mul;
    
    case(alufn_signal[5:4]){
      b00: 
        case(alufn_signal[1:0]){                       
        b00:
        out = adder.sum; 
        b01:
        out = adder.sum;
        b10:
        out = multiplier.mul;
        b11:
        out = division.d;
        }
      b01:                          
        out = boolean.bool;
      b10:                          
        out = shifter.shift;
      b11:                          
        out = c{(SIZE-1)x{b0}, compare.cmp};
      default:
        out = SIZEx{b0};
    
  }
}
